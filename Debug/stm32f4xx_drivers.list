
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006f0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000878  08000880  00001880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000878  08000878  00001880  2**0
                  CONTENTS
  4 .ARM          00000000  08000878  08000878  00001880  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000878  08000880  00001880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000878  08000878  00001878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800087c  0800087c  0000187c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001880  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009b3  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002c7  00000000  00000000  00002263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00002530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007e  00000000  00000000  000025e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000013d2  00000000  00000000  00002666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ecf  00000000  00000000  00003a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000054e6  00000000  00000000  00004907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00009ded  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000224  00000000  00000000  00009e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0000a054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000860 	.word	0x08000860

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000860 	.word	0x08000860

080001c8 <delay>:
#include "stm32f407xx.h"

#define BTN_PRESSED HIGH

void delay(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
    for(uint32_t i = 0; i < 500000/2; i++);
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <delay+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	@ (80001f0 <delay+0x28>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d9f8      	bls.n	80001d4 <delay+0xc>
}
 80001e2:	bf00      	nop
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	0003d08f 	.word	0x0003d08f

080001f4 <main>:

int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0
    GPIO_Handle_t GpioLed, GpioBtn;

    GpioLed.pGPIOx = GPIOD;
 80001fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000264 <main+0x70>)
 80001fc:	60fb      	str	r3, [r7, #12]
    GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80001fe:	230c      	movs	r3, #12
 8000200:	743b      	strb	r3, [r7, #16]
    GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000202:	2301      	movs	r3, #1
 8000204:	747b      	strb	r3, [r7, #17]
    GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000206:	2302      	movs	r3, #2
 8000208:	74bb      	strb	r3, [r7, #18]
    GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800020a:	2300      	movs	r3, #0
 800020c:	753b      	strb	r3, [r7, #20]
    GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800020e:	2300      	movs	r3, #0
 8000210:	74fb      	strb	r3, [r7, #19]

    GPIO_ClockControl(GPIOD, ENABLE);
 8000212:	2101      	movs	r1, #1
 8000214:	4813      	ldr	r0, [pc, #76]	@ (8000264 <main+0x70>)
 8000216:	f000 f853 	bl	80002c0 <GPIO_ClockControl>
    GPIO_Init(&GpioLed);
 800021a:	f107 030c 	add.w	r3, r7, #12
 800021e:	4618      	mov	r0, r3
 8000220:	f000 f934 	bl	800048c <GPIO_Init>

    GpioBtn.pGPIOx = GPIOA;
 8000224:	4b10      	ldr	r3, [pc, #64]	@ (8000268 <main+0x74>)
 8000226:	603b      	str	r3, [r7, #0]
    GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000228:	2300      	movs	r3, #0
 800022a:	713b      	strb	r3, [r7, #4]
    GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800022c:	2300      	movs	r3, #0
 800022e:	717b      	strb	r3, [r7, #5]
    GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000230:	2302      	movs	r3, #2
 8000232:	71bb      	strb	r3, [r7, #6]
    GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000234:	2300      	movs	r3, #0
 8000236:	71fb      	strb	r3, [r7, #7]

    GPIO_ClockControl(GPIOA, ENABLE);
 8000238:	2101      	movs	r1, #1
 800023a:	480b      	ldr	r0, [pc, #44]	@ (8000268 <main+0x74>)
 800023c:	f000 f840 	bl	80002c0 <GPIO_ClockControl>
    GPIO_Init(&GpioBtn);
 8000240:	463b      	mov	r3, r7
 8000242:	4618      	mov	r0, r3
 8000244:	f000 f922 	bl	800048c <GPIO_Init>

    while(1)
    {
        if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == BTN_PRESSED)
 8000248:	2100      	movs	r1, #0
 800024a:	4807      	ldr	r0, [pc, #28]	@ (8000268 <main+0x74>)
 800024c:	f000 fab8 	bl	80007c0 <GPIO_ReadFromInputPin>
 8000250:	4603      	mov	r3, r0
 8000252:	2b01      	cmp	r3, #1
 8000254:	d1f8      	bne.n	8000248 <main+0x54>
        {
            delay();
 8000256:	f7ff ffb7 	bl	80001c8 <delay>
            GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 800025a:	210c      	movs	r1, #12
 800025c:	4801      	ldr	r0, [pc, #4]	@ (8000264 <main+0x70>)
 800025e:	f000 fac5 	bl	80007ec <GPIO_ToggleOutputPin>
        if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == BTN_PRESSED)
 8000262:	e7f1      	b.n	8000248 <main+0x54>
 8000264:	40020c00 	.word	0x40020c00
 8000268:	40020000 	.word	0x40020000

0800026c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800026c:	480d      	ldr	r0, [pc, #52]	@ (80002a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800026e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000270:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000274:	480c      	ldr	r0, [pc, #48]	@ (80002a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000276:	490d      	ldr	r1, [pc, #52]	@ (80002ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000278:	4a0d      	ldr	r2, [pc, #52]	@ (80002b0 <LoopForever+0xe>)
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800027c:	e002      	b.n	8000284 <LoopCopyDataInit>

0800027e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000282:	3304      	adds	r3, #4

08000284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000288:	d3f9      	bcc.n	800027e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028a:	4a0a      	ldr	r2, [pc, #40]	@ (80002b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800028c:	4c0a      	ldr	r4, [pc, #40]	@ (80002b8 <LoopForever+0x16>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000290:	e001      	b.n	8000296 <LoopFillZerobss>

08000292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000294:	3204      	adds	r2, #4

08000296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000298:	d3fb      	bcc.n	8000292 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800029a:	f000 fabd 	bl	8000818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800029e:	f7ff ffa9 	bl	80001f4 <main>

080002a2 <LoopForever>:

LoopForever:
  b LoopForever
 80002a2:	e7fe      	b.n	80002a2 <LoopForever>
  ldr   r0, =_estack
 80002a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b0:	08000880 	.word	0x08000880
  ldr r2, =_sbss
 80002b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b8:	2000001c 	.word	0x2000001c

080002bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002bc:	e7fe      	b.n	80002bc <ADC_IRQHandler>
	...

080002c0 <GPIO_ClockControl>:
 * @return - none
 * 
 * @note - none
 */
void GPIO_ClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi == ENABLE)
 80002cc:	78fb      	ldrb	r3, [r7, #3]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d162      	bne.n	8000398 <GPIO_ClockControl+0xd8>
    {
        if(pGPIOx == GPIOA)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a64      	ldr	r2, [pc, #400]	@ (8000468 <GPIO_ClockControl+0x1a8>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d106      	bne.n	80002e8 <GPIO_ClockControl+0x28>
        {
            GPIOA_CLK_EN();
 80002da:	4b64      	ldr	r3, [pc, #400]	@ (800046c <GPIO_ClockControl+0x1ac>)
 80002dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002de:	4a63      	ldr	r2, [pc, #396]	@ (800046c <GPIO_ClockControl+0x1ac>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6313      	str	r3, [r2, #48]	@ 0x30
        {
            GPIOH_CLK_DI();
        }
    }

}
 80002e6:	e0b9      	b.n	800045c <GPIO_ClockControl+0x19c>
        }else if (pGPIOx == GPIOB)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a61      	ldr	r2, [pc, #388]	@ (8000470 <GPIO_ClockControl+0x1b0>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d106      	bne.n	80002fe <GPIO_ClockControl+0x3e>
            GPIOB_CLK_EN();
 80002f0:	4b5e      	ldr	r3, [pc, #376]	@ (800046c <GPIO_ClockControl+0x1ac>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f4:	4a5d      	ldr	r2, [pc, #372]	@ (800046c <GPIO_ClockControl+0x1ac>)
 80002f6:	f043 0302 	orr.w	r3, r3, #2
 80002fa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002fc:	e0ae      	b.n	800045c <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOC)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a5c      	ldr	r2, [pc, #368]	@ (8000474 <GPIO_ClockControl+0x1b4>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d106      	bne.n	8000314 <GPIO_ClockControl+0x54>
            GPIOC_CLK_EN();
 8000306:	4b59      	ldr	r3, [pc, #356]	@ (800046c <GPIO_ClockControl+0x1ac>)
 8000308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030a:	4a58      	ldr	r2, [pc, #352]	@ (800046c <GPIO_ClockControl+0x1ac>)
 800030c:	f043 0304 	orr.w	r3, r3, #4
 8000310:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000312:	e0a3      	b.n	800045c <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOD)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a58      	ldr	r2, [pc, #352]	@ (8000478 <GPIO_ClockControl+0x1b8>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d106      	bne.n	800032a <GPIO_ClockControl+0x6a>
            GPIOD_CLK_EN();
 800031c:	4b53      	ldr	r3, [pc, #332]	@ (800046c <GPIO_ClockControl+0x1ac>)
 800031e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000320:	4a52      	ldr	r2, [pc, #328]	@ (800046c <GPIO_ClockControl+0x1ac>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000328:	e098      	b.n	800045c <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOE)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a53      	ldr	r2, [pc, #332]	@ (800047c <GPIO_ClockControl+0x1bc>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d106      	bne.n	8000340 <GPIO_ClockControl+0x80>
            GPIOE_CLK_EN();
 8000332:	4b4e      	ldr	r3, [pc, #312]	@ (800046c <GPIO_ClockControl+0x1ac>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000336:	4a4d      	ldr	r2, [pc, #308]	@ (800046c <GPIO_ClockControl+0x1ac>)
 8000338:	f043 0310 	orr.w	r3, r3, #16
 800033c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800033e:	e08d      	b.n	800045c <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOF)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a4f      	ldr	r2, [pc, #316]	@ (8000480 <GPIO_ClockControl+0x1c0>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d106      	bne.n	8000356 <GPIO_ClockControl+0x96>
            GPIOF_CLK_EN();
 8000348:	4b48      	ldr	r3, [pc, #288]	@ (800046c <GPIO_ClockControl+0x1ac>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034c:	4a47      	ldr	r2, [pc, #284]	@ (800046c <GPIO_ClockControl+0x1ac>)
 800034e:	f043 0320 	orr.w	r3, r3, #32
 8000352:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000354:	e082      	b.n	800045c <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOF)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a49      	ldr	r2, [pc, #292]	@ (8000480 <GPIO_ClockControl+0x1c0>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_ClockControl+0xac>
            GPIOF_CLK_EN();
 800035e:	4b43      	ldr	r3, [pc, #268]	@ (800046c <GPIO_ClockControl+0x1ac>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000362:	4a42      	ldr	r2, [pc, #264]	@ (800046c <GPIO_ClockControl+0x1ac>)
 8000364:	f043 0320 	orr.w	r3, r3, #32
 8000368:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800036a:	e077      	b.n	800045c <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOG)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a45      	ldr	r2, [pc, #276]	@ (8000484 <GPIO_ClockControl+0x1c4>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d106      	bne.n	8000382 <GPIO_ClockControl+0xc2>
            GPIOG_CLK_EN();
 8000374:	4b3d      	ldr	r3, [pc, #244]	@ (800046c <GPIO_ClockControl+0x1ac>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000378:	4a3c      	ldr	r2, [pc, #240]	@ (800046c <GPIO_ClockControl+0x1ac>)
 800037a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800037e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000380:	e06c      	b.n	800045c <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOH)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a40      	ldr	r2, [pc, #256]	@ (8000488 <GPIO_ClockControl+0x1c8>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d168      	bne.n	800045c <GPIO_ClockControl+0x19c>
            GPIOH_CLK_EN();
 800038a:	4b38      	ldr	r3, [pc, #224]	@ (800046c <GPIO_ClockControl+0x1ac>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038e:	4a37      	ldr	r2, [pc, #220]	@ (800046c <GPIO_ClockControl+0x1ac>)
 8000390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000394:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000396:	e061      	b.n	800045c <GPIO_ClockControl+0x19c>
        if(pGPIOx == GPIOA)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a33      	ldr	r2, [pc, #204]	@ (8000468 <GPIO_ClockControl+0x1a8>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d106      	bne.n	80003ae <GPIO_ClockControl+0xee>
            GPIOA_CLK_EN();
 80003a0:	4b32      	ldr	r3, [pc, #200]	@ (800046c <GPIO_ClockControl+0x1ac>)
 80003a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a4:	4a31      	ldr	r2, [pc, #196]	@ (800046c <GPIO_ClockControl+0x1ac>)
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ac:	e056      	b.n	800045c <GPIO_ClockControl+0x19c>
        }else if (pGPIOx == GPIOB)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a2f      	ldr	r2, [pc, #188]	@ (8000470 <GPIO_ClockControl+0x1b0>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d106      	bne.n	80003c4 <GPIO_ClockControl+0x104>
            GPIOB_CLK_DI();
 80003b6:	4b2d      	ldr	r3, [pc, #180]	@ (800046c <GPIO_ClockControl+0x1ac>)
 80003b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ba:	4a2c      	ldr	r2, [pc, #176]	@ (800046c <GPIO_ClockControl+0x1ac>)
 80003bc:	f023 0302 	bic.w	r3, r3, #2
 80003c0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c2:	e04b      	b.n	800045c <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOC)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a2b      	ldr	r2, [pc, #172]	@ (8000474 <GPIO_ClockControl+0x1b4>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d106      	bne.n	80003da <GPIO_ClockControl+0x11a>
            GPIOC_CLK_DI();
 80003cc:	4b27      	ldr	r3, [pc, #156]	@ (800046c <GPIO_ClockControl+0x1ac>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d0:	4a26      	ldr	r2, [pc, #152]	@ (800046c <GPIO_ClockControl+0x1ac>)
 80003d2:	f023 0304 	bic.w	r3, r3, #4
 80003d6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d8:	e040      	b.n	800045c <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOD)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a26      	ldr	r2, [pc, #152]	@ (8000478 <GPIO_ClockControl+0x1b8>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d106      	bne.n	80003f0 <GPIO_ClockControl+0x130>
            GPIOD_CLK_DI();
 80003e2:	4b22      	ldr	r3, [pc, #136]	@ (800046c <GPIO_ClockControl+0x1ac>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e6:	4a21      	ldr	r2, [pc, #132]	@ (800046c <GPIO_ClockControl+0x1ac>)
 80003e8:	f023 0308 	bic.w	r3, r3, #8
 80003ec:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ee:	e035      	b.n	800045c <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOE)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a22      	ldr	r2, [pc, #136]	@ (800047c <GPIO_ClockControl+0x1bc>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <GPIO_ClockControl+0x146>
            GPIOE_CLK_DI();
 80003f8:	4b1c      	ldr	r3, [pc, #112]	@ (800046c <GPIO_ClockControl+0x1ac>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003fc:	4a1b      	ldr	r2, [pc, #108]	@ (800046c <GPIO_ClockControl+0x1ac>)
 80003fe:	f023 0310 	bic.w	r3, r3, #16
 8000402:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000404:	e02a      	b.n	800045c <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOF)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a1d      	ldr	r2, [pc, #116]	@ (8000480 <GPIO_ClockControl+0x1c0>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d106      	bne.n	800041c <GPIO_ClockControl+0x15c>
            GPIOF_CLK_DI();
 800040e:	4b17      	ldr	r3, [pc, #92]	@ (800046c <GPIO_ClockControl+0x1ac>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000412:	4a16      	ldr	r2, [pc, #88]	@ (800046c <GPIO_ClockControl+0x1ac>)
 8000414:	f023 0320 	bic.w	r3, r3, #32
 8000418:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800041a:	e01f      	b.n	800045c <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOF)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a18      	ldr	r2, [pc, #96]	@ (8000480 <GPIO_ClockControl+0x1c0>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d106      	bne.n	8000432 <GPIO_ClockControl+0x172>
            GPIOF_CLK_DI();
 8000424:	4b11      	ldr	r3, [pc, #68]	@ (800046c <GPIO_ClockControl+0x1ac>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000428:	4a10      	ldr	r2, [pc, #64]	@ (800046c <GPIO_ClockControl+0x1ac>)
 800042a:	f023 0320 	bic.w	r3, r3, #32
 800042e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000430:	e014      	b.n	800045c <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOG)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a13      	ldr	r2, [pc, #76]	@ (8000484 <GPIO_ClockControl+0x1c4>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d106      	bne.n	8000448 <GPIO_ClockControl+0x188>
            GPIOG_CLK_DI();
 800043a:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <GPIO_ClockControl+0x1ac>)
 800043c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043e:	4a0b      	ldr	r2, [pc, #44]	@ (800046c <GPIO_ClockControl+0x1ac>)
 8000440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000444:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000446:	e009      	b.n	800045c <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOH)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a0f      	ldr	r2, [pc, #60]	@ (8000488 <GPIO_ClockControl+0x1c8>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d105      	bne.n	800045c <GPIO_ClockControl+0x19c>
            GPIOH_CLK_DI();
 8000450:	4b06      	ldr	r3, [pc, #24]	@ (800046c <GPIO_ClockControl+0x1ac>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000454:	4a05      	ldr	r2, [pc, #20]	@ (800046c <GPIO_ClockControl+0x1ac>)
 8000456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800045a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	40020000 	.word	0x40020000
 800046c:	40023800 	.word	0x40023800
 8000470:	40020400 	.word	0x40020400
 8000474:	40020800 	.word	0x40020800
 8000478:	40020c00 	.word	0x40020c00
 800047c:	40021000 	.word	0x40021000
 8000480:	40021400 	.word	0x40021400
 8000484:	40021800 	.word	0x40021800
 8000488:	40021c00 	.word	0x40021c00

0800048c <GPIO_Init>:
 * @return - none
 * 
 * @note - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800048c:	b480      	push	{r7}
 800048e:	b087      	sub	sp, #28
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]

    // Configure the mode of GPIO pin
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	795b      	ldrb	r3, [r3, #5]
 800049c:	2b03      	cmp	r3, #3
 800049e:	d81f      	bhi.n	80004e0 <GPIO_Init+0x54>
    {
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	795b      	ldrb	r3, [r3, #5]
 80004a4:	461a      	mov	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	791b      	ldrb	r3, [r3, #4]
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	fa02 f303 	lsl.w	r3, r2, r3
 80004b0:	617b      	str	r3, [r7, #20]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	791b      	ldrb	r3, [r3, #4]
 80004bc:	4619      	mov	r1, r3
 80004be:	2303      	movs	r3, #3
 80004c0:	408b      	lsls	r3, r1
 80004c2:	43db      	mvns	r3, r3
 80004c4:	4619      	mov	r1, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	400a      	ands	r2, r1
 80004cc:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	6819      	ldr	r1, [r3, #0]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	697a      	ldr	r2, [r7, #20]
 80004da:	430a      	orrs	r2, r1
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	e0c9      	b.n	8000674 <GPIO_Init+0x1e8>

    }else
    {
        // Interrupt mode
        if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	795b      	ldrb	r3, [r3, #5]
 80004e4:	2b04      	cmp	r3, #4
 80004e6:	d117      	bne.n	8000518 <GPIO_Init+0x8c>
        {
            // Configure the FTSR (Falling Trigger Set Register)
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e8:	4b47      	ldr	r3, [pc, #284]	@ (8000608 <GPIO_Init+0x17c>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	7912      	ldrb	r2, [r2, #4]
 80004f0:	4611      	mov	r1, r2
 80004f2:	2201      	movs	r2, #1
 80004f4:	408a      	lsls	r2, r1
 80004f6:	4611      	mov	r1, r2
 80004f8:	4a43      	ldr	r2, [pc, #268]	@ (8000608 <GPIO_Init+0x17c>)
 80004fa:	430b      	orrs	r3, r1
 80004fc:	60d3      	str	r3, [r2, #12]
            // Clear the corresponding RTSR bit
            EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004fe:	4b42      	ldr	r3, [pc, #264]	@ (8000608 <GPIO_Init+0x17c>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	7912      	ldrb	r2, [r2, #4]
 8000506:	4611      	mov	r1, r2
 8000508:	2201      	movs	r2, #1
 800050a:	408a      	lsls	r2, r1
 800050c:	43d2      	mvns	r2, r2
 800050e:	4611      	mov	r1, r2
 8000510:	4a3d      	ldr	r2, [pc, #244]	@ (8000608 <GPIO_Init+0x17c>)
 8000512:	400b      	ands	r3, r1
 8000514:	6093      	str	r3, [r2, #8]
 8000516:	e035      	b.n	8000584 <GPIO_Init+0xf8>

        }else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	795b      	ldrb	r3, [r3, #5]
 800051c:	2b05      	cmp	r3, #5
 800051e:	d117      	bne.n	8000550 <GPIO_Init+0xc4>
        {
            // Configure the RTSR (Rising Trigger Set Register)
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000520:	4b39      	ldr	r3, [pc, #228]	@ (8000608 <GPIO_Init+0x17c>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	7912      	ldrb	r2, [r2, #4]
 8000528:	4611      	mov	r1, r2
 800052a:	2201      	movs	r2, #1
 800052c:	408a      	lsls	r2, r1
 800052e:	4611      	mov	r1, r2
 8000530:	4a35      	ldr	r2, [pc, #212]	@ (8000608 <GPIO_Init+0x17c>)
 8000532:	430b      	orrs	r3, r1
 8000534:	6093      	str	r3, [r2, #8]
            // Clear the corresponding RTSR bit
            EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000536:	4b34      	ldr	r3, [pc, #208]	@ (8000608 <GPIO_Init+0x17c>)
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	7912      	ldrb	r2, [r2, #4]
 800053e:	4611      	mov	r1, r2
 8000540:	2201      	movs	r2, #1
 8000542:	408a      	lsls	r2, r1
 8000544:	43d2      	mvns	r2, r2
 8000546:	4611      	mov	r1, r2
 8000548:	4a2f      	ldr	r2, [pc, #188]	@ (8000608 <GPIO_Init+0x17c>)
 800054a:	400b      	ands	r3, r1
 800054c:	60d3      	str	r3, [r2, #12]
 800054e:	e019      	b.n	8000584 <GPIO_Init+0xf8>

        }else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	795b      	ldrb	r3, [r3, #5]
 8000554:	2b06      	cmp	r3, #6
 8000556:	d115      	bne.n	8000584 <GPIO_Init+0xf8>
        {
            // Configure the both FTSR and RTSR
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000558:	4b2b      	ldr	r3, [pc, #172]	@ (8000608 <GPIO_Init+0x17c>)
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	7912      	ldrb	r2, [r2, #4]
 8000560:	4611      	mov	r1, r2
 8000562:	2201      	movs	r2, #1
 8000564:	408a      	lsls	r2, r1
 8000566:	4611      	mov	r1, r2
 8000568:	4a27      	ldr	r2, [pc, #156]	@ (8000608 <GPIO_Init+0x17c>)
 800056a:	430b      	orrs	r3, r1
 800056c:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056e:	4b26      	ldr	r3, [pc, #152]	@ (8000608 <GPIO_Init+0x17c>)
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	7912      	ldrb	r2, [r2, #4]
 8000576:	4611      	mov	r1, r2
 8000578:	2201      	movs	r2, #1
 800057a:	408a      	lsls	r2, r1
 800057c:	4611      	mov	r1, r2
 800057e:	4a22      	ldr	r2, [pc, #136]	@ (8000608 <GPIO_Init+0x17c>)
 8000580:	430b      	orrs	r3, r1
 8000582:	6093      	str	r3, [r2, #8]
        }

        // Configure the GPIO port selection in SYSCFG_EXTICR (System Config. External Interrupt Control Reg.)
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	791b      	ldrb	r3, [r3, #4]
 8000588:	089b      	lsrs	r3, r3, #2
 800058a:	74fb      	strb	r3, [r7, #19]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	f003 0303 	and.w	r3, r3, #3
 8000594:	74bb      	strb	r3, [r7, #18]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a1c      	ldr	r2, [pc, #112]	@ (800060c <GPIO_Init+0x180>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d045      	beq.n	800062c <GPIO_Init+0x1a0>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000610 <GPIO_Init+0x184>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d02b      	beq.n	8000602 <GPIO_Init+0x176>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a19      	ldr	r2, [pc, #100]	@ (8000614 <GPIO_Init+0x188>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d024      	beq.n	80005fe <GPIO_Init+0x172>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a17      	ldr	r2, [pc, #92]	@ (8000618 <GPIO_Init+0x18c>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d01d      	beq.n	80005fa <GPIO_Init+0x16e>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a16      	ldr	r2, [pc, #88]	@ (800061c <GPIO_Init+0x190>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d016      	beq.n	80005f6 <GPIO_Init+0x16a>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a14      	ldr	r2, [pc, #80]	@ (8000620 <GPIO_Init+0x194>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d00f      	beq.n	80005f2 <GPIO_Init+0x166>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a13      	ldr	r2, [pc, #76]	@ (8000624 <GPIO_Init+0x198>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d008      	beq.n	80005ee <GPIO_Init+0x162>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a11      	ldr	r2, [pc, #68]	@ (8000628 <GPIO_Init+0x19c>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d101      	bne.n	80005ea <GPIO_Init+0x15e>
 80005e6:	2308      	movs	r3, #8
 80005e8:	e021      	b.n	800062e <GPIO_Init+0x1a2>
 80005ea:	2300      	movs	r3, #0
 80005ec:	e01f      	b.n	800062e <GPIO_Init+0x1a2>
 80005ee:	2307      	movs	r3, #7
 80005f0:	e01d      	b.n	800062e <GPIO_Init+0x1a2>
 80005f2:	2306      	movs	r3, #6
 80005f4:	e01b      	b.n	800062e <GPIO_Init+0x1a2>
 80005f6:	2305      	movs	r3, #5
 80005f8:	e019      	b.n	800062e <GPIO_Init+0x1a2>
 80005fa:	2303      	movs	r3, #3
 80005fc:	e017      	b.n	800062e <GPIO_Init+0x1a2>
 80005fe:	2302      	movs	r3, #2
 8000600:	e015      	b.n	800062e <GPIO_Init+0x1a2>
 8000602:	2301      	movs	r3, #1
 8000604:	e013      	b.n	800062e <GPIO_Init+0x1a2>
 8000606:	bf00      	nop
 8000608:	40013c00 	.word	0x40013c00
 800060c:	40020000 	.word	0x40020000
 8000610:	40020400 	.word	0x40020400
 8000614:	40020800 	.word	0x40020800
 8000618:	40020c00 	.word	0x40020c00
 800061c:	40021000 	.word	0x40021000
 8000620:	40021400 	.word	0x40021400
 8000624:	40021800 	.word	0x40021800
 8000628:	40021c00 	.word	0x40021c00
 800062c:	2300      	movs	r3, #0
 800062e:	747b      	strb	r3, [r7, #17]
        SYSCFG_CLK_EN();
 8000630:	4b60      	ldr	r3, [pc, #384]	@ (80007b4 <GPIO_Init+0x328>)
 8000632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000634:	4a5f      	ldr	r2, [pc, #380]	@ (80007b4 <GPIO_Init+0x328>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063a:	6453      	str	r3, [r2, #68]	@ 0x44
        SYSCFG->EXTICR[temp1] |= portcode << (temp2 * 4);
 800063c:	4a5e      	ldr	r2, [pc, #376]	@ (80007b8 <GPIO_Init+0x32c>)
 800063e:	7cfb      	ldrb	r3, [r7, #19]
 8000640:	3302      	adds	r3, #2
 8000642:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000646:	7c79      	ldrb	r1, [r7, #17]
 8000648:	7cbb      	ldrb	r3, [r7, #18]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	fa01 f303 	lsl.w	r3, r1, r3
 8000650:	4618      	mov	r0, r3
 8000652:	4959      	ldr	r1, [pc, #356]	@ (80007b8 <GPIO_Init+0x32c>)
 8000654:	7cfb      	ldrb	r3, [r7, #19]
 8000656:	4302      	orrs	r2, r0
 8000658:	3302      	adds	r3, #2
 800065a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Enable the EXTI interrupt delivery using IMR (Interrupt Mask Register) 
        EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800065e:	4b57      	ldr	r3, [pc, #348]	@ (80007bc <GPIO_Init+0x330>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	7912      	ldrb	r2, [r2, #4]
 8000666:	4611      	mov	r1, r2
 8000668:	2201      	movs	r2, #1
 800066a:	408a      	lsls	r2, r1
 800066c:	4611      	mov	r1, r2
 800066e:	4a53      	ldr	r2, [pc, #332]	@ (80007bc <GPIO_Init+0x330>)
 8000670:	430b      	orrs	r3, r1
 8000672:	6013      	str	r3, [r2, #0]

    }

    temp = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

    // Configure the speed
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	799b      	ldrb	r3, [r3, #6]
 800067c:	461a      	mov	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	fa02 f303 	lsl.w	r3, r2, r3
 8000688:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	689a      	ldr	r2, [r3, #8]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	791b      	ldrb	r3, [r3, #4]
 8000694:	4619      	mov	r1, r3
 8000696:	2303      	movs	r3, #3
 8000698:	408b      	lsls	r3, r1
 800069a:	43db      	mvns	r3, r3
 800069c:	4619      	mov	r1, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	400a      	ands	r2, r1
 80006a4:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	6899      	ldr	r1, [r3, #8]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	430a      	orrs	r2, r1
 80006b4:	609a      	str	r2, [r3, #8]

    temp = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]

    // Configure the pull-up/pull-down resistor settings
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	79db      	ldrb	r3, [r3, #7]
 80006be:	461a      	mov	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	791b      	ldrb	r3, [r3, #4]
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	68da      	ldr	r2, [r3, #12]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	791b      	ldrb	r3, [r3, #4]
 80006d6:	4619      	mov	r1, r3
 80006d8:	2303      	movs	r3, #3
 80006da:	408b      	lsls	r3, r1
 80006dc:	43db      	mvns	r3, r3
 80006de:	4619      	mov	r1, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	400a      	ands	r2, r1
 80006e6:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	68d9      	ldr	r1, [r3, #12]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	697a      	ldr	r2, [r7, #20]
 80006f4:	430a      	orrs	r2, r1
 80006f6:	60da      	str	r2, [r3, #12]

    temp = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]

    // Configure the output type
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	7a1b      	ldrb	r3, [r3, #8]
 8000700:	461a      	mov	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	791b      	ldrb	r3, [r3, #4]
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	4619      	mov	r1, r3
 8000718:	2303      	movs	r3, #3
 800071a:	408b      	lsls	r3, r1
 800071c:	43db      	mvns	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	400a      	ands	r2, r1
 8000726:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	6859      	ldr	r1, [r3, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	430a      	orrs	r2, r1
 8000736:	605a      	str	r2, [r3, #4]

    temp = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]

    // Configure the alternate functionality
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	795b      	ldrb	r3, [r3, #5]
 8000740:	2b02      	cmp	r3, #2
 8000742:	d131      	bne.n	80007a8 <GPIO_Init+0x31c>
    {
        uint8_t temp1, temp2;

        temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	791b      	ldrb	r3, [r3, #4]
 8000748:	08db      	lsrs	r3, r3, #3
 800074a:	743b      	strb	r3, [r7, #16]
        temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	791b      	ldrb	r3, [r3, #4]
 8000750:	f003 0307 	and.w	r3, r3, #7
 8000754:	73fb      	strb	r3, [r7, #15]
        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	7c3a      	ldrb	r2, [r7, #16]
 800075c:	3208      	adds	r2, #8
 800075e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	220f      	movs	r2, #15
 8000768:	fa02 f303 	lsl.w	r3, r2, r3
 800076c:	43db      	mvns	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	7c3a      	ldrb	r2, [r7, #16]
 8000776:	4001      	ands	r1, r0
 8000778:	3208      	adds	r2, #8
 800077a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	7c3a      	ldrb	r2, [r7, #16]
 8000784:	3208      	adds	r2, #8
 8000786:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	7a5b      	ldrb	r3, [r3, #9]
 800078e:	461a      	mov	r2, r3
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	4618      	mov	r0, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	7c3a      	ldrb	r2, [r7, #16]
 80007a0:	4301      	orrs	r1, r0
 80007a2:	3208      	adds	r2, #8
 80007a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    }

}
 80007a8:	bf00      	nop
 80007aa:	371c      	adds	r7, #28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40013800 	.word	0x40013800
 80007bc:	40013c00 	.word	0x40013c00

080007c0 <GPIO_ReadFromInputPin>:
 * @return - 0 or 1
 * 
 * @note - none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	70fb      	strb	r3, [r7, #3]
    uint8_t value;
    value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	691a      	ldr	r2, [r3, #16]
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	fa22 f303 	lsr.w	r3, r2, r3
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	73fb      	strb	r3, [r7, #15]

    return value;
 80007de:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <GPIO_ToggleOutputPin>:
 * @return - none
 * 
 * @note - none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
    pGPIOx->ODR ^= (1 << PinNumber);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	78fa      	ldrb	r2, [r7, #3]
 80007fe:	2101      	movs	r1, #1
 8000800:	fa01 f202 	lsl.w	r2, r1, r2
 8000804:	405a      	eors	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	615a      	str	r2, [r3, #20]
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
	...

08000818 <__libc_init_array>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	4d0d      	ldr	r5, [pc, #52]	@ (8000850 <__libc_init_array+0x38>)
 800081c:	4c0d      	ldr	r4, [pc, #52]	@ (8000854 <__libc_init_array+0x3c>)
 800081e:	1b64      	subs	r4, r4, r5
 8000820:	10a4      	asrs	r4, r4, #2
 8000822:	2600      	movs	r6, #0
 8000824:	42a6      	cmp	r6, r4
 8000826:	d109      	bne.n	800083c <__libc_init_array+0x24>
 8000828:	4d0b      	ldr	r5, [pc, #44]	@ (8000858 <__libc_init_array+0x40>)
 800082a:	4c0c      	ldr	r4, [pc, #48]	@ (800085c <__libc_init_array+0x44>)
 800082c:	f000 f818 	bl	8000860 <_init>
 8000830:	1b64      	subs	r4, r4, r5
 8000832:	10a4      	asrs	r4, r4, #2
 8000834:	2600      	movs	r6, #0
 8000836:	42a6      	cmp	r6, r4
 8000838:	d105      	bne.n	8000846 <__libc_init_array+0x2e>
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000840:	4798      	blx	r3
 8000842:	3601      	adds	r6, #1
 8000844:	e7ee      	b.n	8000824 <__libc_init_array+0xc>
 8000846:	f855 3b04 	ldr.w	r3, [r5], #4
 800084a:	4798      	blx	r3
 800084c:	3601      	adds	r6, #1
 800084e:	e7f2      	b.n	8000836 <__libc_init_array+0x1e>
 8000850:	08000878 	.word	0x08000878
 8000854:	08000878 	.word	0x08000878
 8000858:	08000878 	.word	0x08000878
 800085c:	0800087c 	.word	0x0800087c

08000860 <_init>:
 8000860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000862:	bf00      	nop
 8000864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000866:	bc08      	pop	{r3}
 8000868:	469e      	mov	lr, r3
 800086a:	4770      	bx	lr

0800086c <_fini>:
 800086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086e:	bf00      	nop
 8000870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000872:	bc08      	pop	{r3}
 8000874:	469e      	mov	lr, r3
 8000876:	4770      	bx	lr
