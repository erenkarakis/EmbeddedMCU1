
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007c8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000950  08000958  00001958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000950  08000950  00001958  2**0
                  CONTENTS
  4 .ARM          00000000  08000950  08000950  00001958  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000950  08000958  00001958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000950  08000950  00001950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000954  08000954  00001954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001958  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a18  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000295  00000000  00000000  000023a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00002638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008c  00000000  00000000  00002700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001439  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000fb5  00000000  00000000  00003bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000571f  00000000  00000000  00004b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000a299  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000268  00000000  00000000  0000a2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0000a544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000938 	.word	0x08000938

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000938 	.word	0x08000938

080001c8 <main>:
 */

#include "stm32f407xx.h"

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
    GPIO_Handle_t GpioLed, GpioBtn;

    GpioLed.pGPIOx = GPIOD;
 80001ce:	4b18      	ldr	r3, [pc, #96]	@ (8000230 <main+0x68>)
 80001d0:	60fb      	str	r3, [r7, #12]
    GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80001d2:	230c      	movs	r3, #12
 80001d4:	743b      	strb	r3, [r7, #16]
    GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80001d6:	2301      	movs	r3, #1
 80001d8:	747b      	strb	r3, [r7, #17]
    GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001da:	2302      	movs	r3, #2
 80001dc:	74bb      	strb	r3, [r7, #18]
    GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001de:	2300      	movs	r3, #0
 80001e0:	753b      	strb	r3, [r7, #20]
    GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001e2:	2300      	movs	r3, #0
 80001e4:	74fb      	strb	r3, [r7, #19]

    GPIO_ClockControl(GPIOD, ENABLE);
 80001e6:	2101      	movs	r1, #1
 80001e8:	4811      	ldr	r0, [pc, #68]	@ (8000230 <main+0x68>)
 80001ea:	f000 f85d 	bl	80002a8 <GPIO_ClockControl>
    GPIO_Init(&GpioLed);
 80001ee:	f107 030c 	add.w	r3, r7, #12
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 f93e 	bl	8000474 <GPIO_Init>

    GpioBtn.pGPIOx = GPIOA;
 80001f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000234 <main+0x6c>)
 80001fa:	603b      	str	r3, [r7, #0]
    GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80001fc:	2300      	movs	r3, #0
 80001fe:	713b      	strb	r3, [r7, #4]
    GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000200:	2304      	movs	r3, #4
 8000202:	717b      	strb	r3, [r7, #5]
    GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000204:	2302      	movs	r3, #2
 8000206:	71bb      	strb	r3, [r7, #6]
    GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000208:	2300      	movs	r3, #0
 800020a:	71fb      	strb	r3, [r7, #7]

    GPIO_ClockControl(GPIOA, ENABLE);
 800020c:	2101      	movs	r1, #1
 800020e:	4809      	ldr	r0, [pc, #36]	@ (8000234 <main+0x6c>)
 8000210:	f000 f84a 	bl	80002a8 <GPIO_ClockControl>
    GPIO_Init(&GpioBtn);
 8000214:	463b      	mov	r3, r7
 8000216:	4618      	mov	r0, r3
 8000218:	f000 f92c 	bl	8000474 <GPIO_Init>

    GPIO_SetIRQPriority(IRQ_NO_EXTI0, 15);
 800021c:	210f      	movs	r1, #15
 800021e:	2006      	movs	r0, #6
 8000220:	f000 fb1c 	bl	800085c <GPIO_SetIRQPriority>
    GPIO_EnableIRQ(IRQ_NO_EXTI0);
 8000224:	2006      	movs	r0, #6
 8000226:	f000 fad5 	bl	80007d4 <GPIO_EnableIRQ>

    while(1);
 800022a:	bf00      	nop
 800022c:	e7fd      	b.n	800022a <main+0x62>
 800022e:	bf00      	nop
 8000230:	40020c00 	.word	0x40020c00
 8000234:	40020000 	.word	0x40020000

08000238 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
    GPIO_IRQHandling(GPIO_PIN_NO_0);
 800023c:	2000      	movs	r0, #0
 800023e:	f000 fb37 	bl	80008b0 <GPIO_IRQHandling>
    GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 8000242:	210c      	movs	r1, #12
 8000244:	4802      	ldr	r0, [pc, #8]	@ (8000250 <EXTI0_IRQHandler+0x18>)
 8000246:	f000 faaf 	bl	80007a8 <GPIO_ToggleOutputPin>
 800024a:	bf00      	nop
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40020c00 	.word	0x40020c00

08000254 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000254:	480d      	ldr	r0, [pc, #52]	@ (800028c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000256:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000258:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800025c:	480c      	ldr	r0, [pc, #48]	@ (8000290 <LoopForever+0x6>)
  ldr r1, =_edata
 800025e:	490d      	ldr	r1, [pc, #52]	@ (8000294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000260:	4a0d      	ldr	r2, [pc, #52]	@ (8000298 <LoopForever+0xe>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000264:	e002      	b.n	800026c <LoopCopyDataInit>

08000266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026a:	3304      	adds	r3, #4

0800026c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800026c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000270:	d3f9      	bcc.n	8000266 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000272:	4a0a      	ldr	r2, [pc, #40]	@ (800029c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000274:	4c0a      	ldr	r4, [pc, #40]	@ (80002a0 <LoopForever+0x16>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000278:	e001      	b.n	800027e <LoopFillZerobss>

0800027a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800027c:	3204      	adds	r2, #4

0800027e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000280:	d3fb      	bcc.n	800027a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000282:	f000 fb35 	bl	80008f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000286:	f7ff ff9f 	bl	80001c8 <main>

0800028a <LoopForever>:

LoopForever:
  b LoopForever
 800028a:	e7fe      	b.n	800028a <LoopForever>
  ldr   r0, =_estack
 800028c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000294:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000298:	08000958 	.word	0x08000958
  ldr r2, =_sbss
 800029c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a0:	2000001c 	.word	0x2000001c

080002a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a4:	e7fe      	b.n	80002a4 <ADC_IRQHandler>
	...

080002a8 <GPIO_ClockControl>:
 * @return - none
 * 
 * @note - none
 */
void GPIO_ClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi == ENABLE)
 80002b4:	78fb      	ldrb	r3, [r7, #3]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d162      	bne.n	8000380 <GPIO_ClockControl+0xd8>
    {
        if(pGPIOx == GPIOA)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a64      	ldr	r2, [pc, #400]	@ (8000450 <GPIO_ClockControl+0x1a8>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d106      	bne.n	80002d0 <GPIO_ClockControl+0x28>
        {
            GPIOA_CLK_EN();
 80002c2:	4b64      	ldr	r3, [pc, #400]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c6:	4a63      	ldr	r2, [pc, #396]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6313      	str	r3, [r2, #48]	@ 0x30
        {
            GPIOH_CLK_DI();
        }
    }

}
 80002ce:	e0b9      	b.n	8000444 <GPIO_ClockControl+0x19c>
        }else if (pGPIOx == GPIOB)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a61      	ldr	r2, [pc, #388]	@ (8000458 <GPIO_ClockControl+0x1b0>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d106      	bne.n	80002e6 <GPIO_ClockControl+0x3e>
            GPIOB_CLK_EN();
 80002d8:	4b5e      	ldr	r3, [pc, #376]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 80002da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002dc:	4a5d      	ldr	r2, [pc, #372]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 80002de:	f043 0302 	orr.w	r3, r3, #2
 80002e2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002e4:	e0ae      	b.n	8000444 <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOC)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a5c      	ldr	r2, [pc, #368]	@ (800045c <GPIO_ClockControl+0x1b4>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_ClockControl+0x54>
            GPIOC_CLK_EN();
 80002ee:	4b59      	ldr	r3, [pc, #356]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f2:	4a58      	ldr	r2, [pc, #352]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 80002f4:	f043 0304 	orr.w	r3, r3, #4
 80002f8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002fa:	e0a3      	b.n	8000444 <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOD)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a58      	ldr	r2, [pc, #352]	@ (8000460 <GPIO_ClockControl+0x1b8>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_ClockControl+0x6a>
            GPIOD_CLK_EN();
 8000304:	4b53      	ldr	r3, [pc, #332]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 8000306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000308:	4a52      	ldr	r2, [pc, #328]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 800030a:	f043 0308 	orr.w	r3, r3, #8
 800030e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000310:	e098      	b.n	8000444 <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOE)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a53      	ldr	r2, [pc, #332]	@ (8000464 <GPIO_ClockControl+0x1bc>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_ClockControl+0x80>
            GPIOE_CLK_EN();
 800031a:	4b4e      	ldr	r3, [pc, #312]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800031e:	4a4d      	ldr	r2, [pc, #308]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 8000320:	f043 0310 	orr.w	r3, r3, #16
 8000324:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000326:	e08d      	b.n	8000444 <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOF)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a4f      	ldr	r2, [pc, #316]	@ (8000468 <GPIO_ClockControl+0x1c0>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <GPIO_ClockControl+0x96>
            GPIOF_CLK_EN();
 8000330:	4b48      	ldr	r3, [pc, #288]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000334:	4a47      	ldr	r2, [pc, #284]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 8000336:	f043 0320 	orr.w	r3, r3, #32
 800033a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800033c:	e082      	b.n	8000444 <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOF)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a49      	ldr	r2, [pc, #292]	@ (8000468 <GPIO_ClockControl+0x1c0>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_ClockControl+0xac>
            GPIOF_CLK_EN();
 8000346:	4b43      	ldr	r3, [pc, #268]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034a:	4a42      	ldr	r2, [pc, #264]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 800034c:	f043 0320 	orr.w	r3, r3, #32
 8000350:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000352:	e077      	b.n	8000444 <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOG)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a45      	ldr	r2, [pc, #276]	@ (800046c <GPIO_ClockControl+0x1c4>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_ClockControl+0xc2>
            GPIOG_CLK_EN();
 800035c:	4b3d      	ldr	r3, [pc, #244]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000360:	4a3c      	ldr	r2, [pc, #240]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 8000362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000366:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000368:	e06c      	b.n	8000444 <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOH)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a40      	ldr	r2, [pc, #256]	@ (8000470 <GPIO_ClockControl+0x1c8>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d168      	bne.n	8000444 <GPIO_ClockControl+0x19c>
            GPIOH_CLK_EN();
 8000372:	4b38      	ldr	r3, [pc, #224]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000376:	4a37      	ldr	r2, [pc, #220]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 8000378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800037c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800037e:	e061      	b.n	8000444 <GPIO_ClockControl+0x19c>
        if(pGPIOx == GPIOA)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a33      	ldr	r2, [pc, #204]	@ (8000450 <GPIO_ClockControl+0x1a8>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d106      	bne.n	8000396 <GPIO_ClockControl+0xee>
            GPIOA_CLK_EN();
 8000388:	4b32      	ldr	r3, [pc, #200]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038c:	4a31      	ldr	r2, [pc, #196]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000394:	e056      	b.n	8000444 <GPIO_ClockControl+0x19c>
        }else if (pGPIOx == GPIOB)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a2f      	ldr	r2, [pc, #188]	@ (8000458 <GPIO_ClockControl+0x1b0>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d106      	bne.n	80003ac <GPIO_ClockControl+0x104>
            GPIOB_CLK_DI();
 800039e:	4b2d      	ldr	r3, [pc, #180]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a2:	4a2c      	ldr	r2, [pc, #176]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 80003a4:	f023 0302 	bic.w	r3, r3, #2
 80003a8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003aa:	e04b      	b.n	8000444 <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOC)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a2b      	ldr	r2, [pc, #172]	@ (800045c <GPIO_ClockControl+0x1b4>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d106      	bne.n	80003c2 <GPIO_ClockControl+0x11a>
            GPIOC_CLK_DI();
 80003b4:	4b27      	ldr	r3, [pc, #156]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b8:	4a26      	ldr	r2, [pc, #152]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 80003ba:	f023 0304 	bic.w	r3, r3, #4
 80003be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c0:	e040      	b.n	8000444 <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOD)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a26      	ldr	r2, [pc, #152]	@ (8000460 <GPIO_ClockControl+0x1b8>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <GPIO_ClockControl+0x130>
            GPIOD_CLK_DI();
 80003ca:	4b22      	ldr	r3, [pc, #136]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ce:	4a21      	ldr	r2, [pc, #132]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 80003d0:	f023 0308 	bic.w	r3, r3, #8
 80003d4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d6:	e035      	b.n	8000444 <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOE)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a22      	ldr	r2, [pc, #136]	@ (8000464 <GPIO_ClockControl+0x1bc>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <GPIO_ClockControl+0x146>
            GPIOE_CLK_DI();
 80003e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 80003e6:	f023 0310 	bic.w	r3, r3, #16
 80003ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ec:	e02a      	b.n	8000444 <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOF)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000468 <GPIO_ClockControl+0x1c0>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d106      	bne.n	8000404 <GPIO_ClockControl+0x15c>
            GPIOF_CLK_DI();
 80003f6:	4b17      	ldr	r3, [pc, #92]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 80003f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003fa:	4a16      	ldr	r2, [pc, #88]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 80003fc:	f023 0320 	bic.w	r3, r3, #32
 8000400:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000402:	e01f      	b.n	8000444 <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOF)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a18      	ldr	r2, [pc, #96]	@ (8000468 <GPIO_ClockControl+0x1c0>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <GPIO_ClockControl+0x172>
            GPIOF_CLK_DI();
 800040c:	4b11      	ldr	r3, [pc, #68]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000410:	4a10      	ldr	r2, [pc, #64]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 8000412:	f023 0320 	bic.w	r3, r3, #32
 8000416:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000418:	e014      	b.n	8000444 <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOG)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a13      	ldr	r2, [pc, #76]	@ (800046c <GPIO_ClockControl+0x1c4>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_ClockControl+0x188>
            GPIOG_CLK_DI();
 8000422:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 8000424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000426:	4a0b      	ldr	r2, [pc, #44]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 8000428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800042c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042e:	e009      	b.n	8000444 <GPIO_ClockControl+0x19c>
        }else if(pGPIOx == GPIOH)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a0f      	ldr	r2, [pc, #60]	@ (8000470 <GPIO_ClockControl+0x1c8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d105      	bne.n	8000444 <GPIO_ClockControl+0x19c>
            GPIOH_CLK_DI();
 8000438:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043c:	4a05      	ldr	r2, [pc, #20]	@ (8000454 <GPIO_ClockControl+0x1ac>)
 800043e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000442:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	40020000 	.word	0x40020000
 8000454:	40023800 	.word	0x40023800
 8000458:	40020400 	.word	0x40020400
 800045c:	40020800 	.word	0x40020800
 8000460:	40020c00 	.word	0x40020c00
 8000464:	40021000 	.word	0x40021000
 8000468:	40021400 	.word	0x40021400
 800046c:	40021800 	.word	0x40021800
 8000470:	40021c00 	.word	0x40021c00

08000474 <GPIO_Init>:
 * @return - none
 * 
 * @note - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000474:	b480      	push	{r7}
 8000476:	b087      	sub	sp, #28
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	617b      	str	r3, [r7, #20]

    // Configure the mode of GPIO pin
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	795b      	ldrb	r3, [r3, #5]
 8000484:	2b03      	cmp	r3, #3
 8000486:	d81f      	bhi.n	80004c8 <GPIO_Init+0x54>
    {
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	795b      	ldrb	r3, [r3, #5]
 800048c:	461a      	mov	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	791b      	ldrb	r3, [r3, #4]
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	fa02 f303 	lsl.w	r3, r2, r3
 8000498:	617b      	str	r3, [r7, #20]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	791b      	ldrb	r3, [r3, #4]
 80004a4:	4619      	mov	r1, r3
 80004a6:	2303      	movs	r3, #3
 80004a8:	408b      	lsls	r3, r1
 80004aa:	43db      	mvns	r3, r3
 80004ac:	4619      	mov	r1, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	400a      	ands	r2, r1
 80004b4:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	6819      	ldr	r1, [r3, #0]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	697a      	ldr	r2, [r7, #20]
 80004c2:	430a      	orrs	r2, r1
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	e0c9      	b.n	800065c <GPIO_Init+0x1e8>

    }else
    {
        // Interrupt mode
        if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	795b      	ldrb	r3, [r3, #5]
 80004cc:	2b04      	cmp	r3, #4
 80004ce:	d117      	bne.n	8000500 <GPIO_Init+0x8c>
        {
            // Configure the FTSR (Falling Trigger Set Register)
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d0:	4b47      	ldr	r3, [pc, #284]	@ (80005f0 <GPIO_Init+0x17c>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	7912      	ldrb	r2, [r2, #4]
 80004d8:	4611      	mov	r1, r2
 80004da:	2201      	movs	r2, #1
 80004dc:	408a      	lsls	r2, r1
 80004de:	4611      	mov	r1, r2
 80004e0:	4a43      	ldr	r2, [pc, #268]	@ (80005f0 <GPIO_Init+0x17c>)
 80004e2:	430b      	orrs	r3, r1
 80004e4:	60d3      	str	r3, [r2, #12]
            // Clear the corresponding RTSR bit
            EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e6:	4b42      	ldr	r3, [pc, #264]	@ (80005f0 <GPIO_Init+0x17c>)
 80004e8:	689b      	ldr	r3, [r3, #8]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	7912      	ldrb	r2, [r2, #4]
 80004ee:	4611      	mov	r1, r2
 80004f0:	2201      	movs	r2, #1
 80004f2:	408a      	lsls	r2, r1
 80004f4:	43d2      	mvns	r2, r2
 80004f6:	4611      	mov	r1, r2
 80004f8:	4a3d      	ldr	r2, [pc, #244]	@ (80005f0 <GPIO_Init+0x17c>)
 80004fa:	400b      	ands	r3, r1
 80004fc:	6093      	str	r3, [r2, #8]
 80004fe:	e035      	b.n	800056c <GPIO_Init+0xf8>

        }else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	795b      	ldrb	r3, [r3, #5]
 8000504:	2b05      	cmp	r3, #5
 8000506:	d117      	bne.n	8000538 <GPIO_Init+0xc4>
        {
            // Configure the RTSR (Rising Trigger Set Register)
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000508:	4b39      	ldr	r3, [pc, #228]	@ (80005f0 <GPIO_Init+0x17c>)
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	7912      	ldrb	r2, [r2, #4]
 8000510:	4611      	mov	r1, r2
 8000512:	2201      	movs	r2, #1
 8000514:	408a      	lsls	r2, r1
 8000516:	4611      	mov	r1, r2
 8000518:	4a35      	ldr	r2, [pc, #212]	@ (80005f0 <GPIO_Init+0x17c>)
 800051a:	430b      	orrs	r3, r1
 800051c:	6093      	str	r3, [r2, #8]
            // Clear the corresponding RTSR bit
            EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800051e:	4b34      	ldr	r3, [pc, #208]	@ (80005f0 <GPIO_Init+0x17c>)
 8000520:	68db      	ldr	r3, [r3, #12]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	7912      	ldrb	r2, [r2, #4]
 8000526:	4611      	mov	r1, r2
 8000528:	2201      	movs	r2, #1
 800052a:	408a      	lsls	r2, r1
 800052c:	43d2      	mvns	r2, r2
 800052e:	4611      	mov	r1, r2
 8000530:	4a2f      	ldr	r2, [pc, #188]	@ (80005f0 <GPIO_Init+0x17c>)
 8000532:	400b      	ands	r3, r1
 8000534:	60d3      	str	r3, [r2, #12]
 8000536:	e019      	b.n	800056c <GPIO_Init+0xf8>

        }else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	795b      	ldrb	r3, [r3, #5]
 800053c:	2b06      	cmp	r3, #6
 800053e:	d115      	bne.n	800056c <GPIO_Init+0xf8>
        {
            // Configure the both FTSR and RTSR
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000540:	4b2b      	ldr	r3, [pc, #172]	@ (80005f0 <GPIO_Init+0x17c>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	7912      	ldrb	r2, [r2, #4]
 8000548:	4611      	mov	r1, r2
 800054a:	2201      	movs	r2, #1
 800054c:	408a      	lsls	r2, r1
 800054e:	4611      	mov	r1, r2
 8000550:	4a27      	ldr	r2, [pc, #156]	@ (80005f0 <GPIO_Init+0x17c>)
 8000552:	430b      	orrs	r3, r1
 8000554:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000556:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <GPIO_Init+0x17c>)
 8000558:	689b      	ldr	r3, [r3, #8]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	7912      	ldrb	r2, [r2, #4]
 800055e:	4611      	mov	r1, r2
 8000560:	2201      	movs	r2, #1
 8000562:	408a      	lsls	r2, r1
 8000564:	4611      	mov	r1, r2
 8000566:	4a22      	ldr	r2, [pc, #136]	@ (80005f0 <GPIO_Init+0x17c>)
 8000568:	430b      	orrs	r3, r1
 800056a:	6093      	str	r3, [r2, #8]
        }

        // Configure the GPIO port selection in SYSCFG_EXTICR (System Config. External Interrupt Control Reg.)
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	791b      	ldrb	r3, [r3, #4]
 8000570:	089b      	lsrs	r3, r3, #2
 8000572:	74fb      	strb	r3, [r7, #19]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	791b      	ldrb	r3, [r3, #4]
 8000578:	f003 0303 	and.w	r3, r3, #3
 800057c:	74bb      	strb	r3, [r7, #18]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a1c      	ldr	r2, [pc, #112]	@ (80005f4 <GPIO_Init+0x180>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d045      	beq.n	8000614 <GPIO_Init+0x1a0>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a1a      	ldr	r2, [pc, #104]	@ (80005f8 <GPIO_Init+0x184>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d02b      	beq.n	80005ea <GPIO_Init+0x176>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a19      	ldr	r2, [pc, #100]	@ (80005fc <GPIO_Init+0x188>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d024      	beq.n	80005e6 <GPIO_Init+0x172>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a17      	ldr	r2, [pc, #92]	@ (8000600 <GPIO_Init+0x18c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d01d      	beq.n	80005e2 <GPIO_Init+0x16e>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a16      	ldr	r2, [pc, #88]	@ (8000604 <GPIO_Init+0x190>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d016      	beq.n	80005de <GPIO_Init+0x16a>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a14      	ldr	r2, [pc, #80]	@ (8000608 <GPIO_Init+0x194>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d00f      	beq.n	80005da <GPIO_Init+0x166>
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a13      	ldr	r2, [pc, #76]	@ (800060c <GPIO_Init+0x198>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d008      	beq.n	80005d6 <GPIO_Init+0x162>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a11      	ldr	r2, [pc, #68]	@ (8000610 <GPIO_Init+0x19c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d101      	bne.n	80005d2 <GPIO_Init+0x15e>
 80005ce:	2308      	movs	r3, #8
 80005d0:	e021      	b.n	8000616 <GPIO_Init+0x1a2>
 80005d2:	2300      	movs	r3, #0
 80005d4:	e01f      	b.n	8000616 <GPIO_Init+0x1a2>
 80005d6:	2307      	movs	r3, #7
 80005d8:	e01d      	b.n	8000616 <GPIO_Init+0x1a2>
 80005da:	2306      	movs	r3, #6
 80005dc:	e01b      	b.n	8000616 <GPIO_Init+0x1a2>
 80005de:	2305      	movs	r3, #5
 80005e0:	e019      	b.n	8000616 <GPIO_Init+0x1a2>
 80005e2:	2303      	movs	r3, #3
 80005e4:	e017      	b.n	8000616 <GPIO_Init+0x1a2>
 80005e6:	2302      	movs	r3, #2
 80005e8:	e015      	b.n	8000616 <GPIO_Init+0x1a2>
 80005ea:	2301      	movs	r3, #1
 80005ec:	e013      	b.n	8000616 <GPIO_Init+0x1a2>
 80005ee:	bf00      	nop
 80005f0:	40013c00 	.word	0x40013c00
 80005f4:	40020000 	.word	0x40020000
 80005f8:	40020400 	.word	0x40020400
 80005fc:	40020800 	.word	0x40020800
 8000600:	40020c00 	.word	0x40020c00
 8000604:	40021000 	.word	0x40021000
 8000608:	40021400 	.word	0x40021400
 800060c:	40021800 	.word	0x40021800
 8000610:	40021c00 	.word	0x40021c00
 8000614:	2300      	movs	r3, #0
 8000616:	747b      	strb	r3, [r7, #17]
        SYSCFG_CLK_EN();
 8000618:	4b60      	ldr	r3, [pc, #384]	@ (800079c <GPIO_Init+0x328>)
 800061a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800061c:	4a5f      	ldr	r2, [pc, #380]	@ (800079c <GPIO_Init+0x328>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000622:	6453      	str	r3, [r2, #68]	@ 0x44
        SYSCFG->EXTICR[temp1] |= portcode << (temp2 * 4);
 8000624:	4a5e      	ldr	r2, [pc, #376]	@ (80007a0 <GPIO_Init+0x32c>)
 8000626:	7cfb      	ldrb	r3, [r7, #19]
 8000628:	3302      	adds	r3, #2
 800062a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800062e:	7c79      	ldrb	r1, [r7, #17]
 8000630:	7cbb      	ldrb	r3, [r7, #18]
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	fa01 f303 	lsl.w	r3, r1, r3
 8000638:	4618      	mov	r0, r3
 800063a:	4959      	ldr	r1, [pc, #356]	@ (80007a0 <GPIO_Init+0x32c>)
 800063c:	7cfb      	ldrb	r3, [r7, #19]
 800063e:	4302      	orrs	r2, r0
 8000640:	3302      	adds	r3, #2
 8000642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Enable the EXTI interrupt delivery using IMR (Interrupt Mask Register) 
        EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000646:	4b57      	ldr	r3, [pc, #348]	@ (80007a4 <GPIO_Init+0x330>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	7912      	ldrb	r2, [r2, #4]
 800064e:	4611      	mov	r1, r2
 8000650:	2201      	movs	r2, #1
 8000652:	408a      	lsls	r2, r1
 8000654:	4611      	mov	r1, r2
 8000656:	4a53      	ldr	r2, [pc, #332]	@ (80007a4 <GPIO_Init+0x330>)
 8000658:	430b      	orrs	r3, r1
 800065a:	6013      	str	r3, [r2, #0]

    }

    temp = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]

    // Configure the speed
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	799b      	ldrb	r3, [r3, #6]
 8000664:	461a      	mov	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	791b      	ldrb	r3, [r3, #4]
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	fa02 f303 	lsl.w	r3, r2, r3
 8000670:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	689a      	ldr	r2, [r3, #8]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	791b      	ldrb	r3, [r3, #4]
 800067c:	4619      	mov	r1, r3
 800067e:	2303      	movs	r3, #3
 8000680:	408b      	lsls	r3, r1
 8000682:	43db      	mvns	r3, r3
 8000684:	4619      	mov	r1, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	400a      	ands	r2, r1
 800068c:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	6899      	ldr	r1, [r3, #8]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	697a      	ldr	r2, [r7, #20]
 800069a:	430a      	orrs	r2, r1
 800069c:	609a      	str	r2, [r3, #8]

    temp = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]

    // Configure the pull-up/pull-down resistor settings
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	79db      	ldrb	r3, [r3, #7]
 80006a6:	461a      	mov	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	fa02 f303 	lsl.w	r3, r2, r3
 80006b2:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	68da      	ldr	r2, [r3, #12]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	4619      	mov	r1, r3
 80006c0:	2303      	movs	r3, #3
 80006c2:	408b      	lsls	r3, r1
 80006c4:	43db      	mvns	r3, r3
 80006c6:	4619      	mov	r1, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	400a      	ands	r2, r1
 80006ce:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	68d9      	ldr	r1, [r3, #12]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	430a      	orrs	r2, r1
 80006de:	60da      	str	r2, [r3, #12]

    temp = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]

    // Configure the output type
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	7a1b      	ldrb	r3, [r3, #8]
 80006e8:	461a      	mov	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	791b      	ldrb	r3, [r3, #4]
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	685a      	ldr	r2, [r3, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	791b      	ldrb	r3, [r3, #4]
 80006fe:	4619      	mov	r1, r3
 8000700:	2303      	movs	r3, #3
 8000702:	408b      	lsls	r3, r1
 8000704:	43db      	mvns	r3, r3
 8000706:	4619      	mov	r1, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	400a      	ands	r2, r1
 800070e:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	6859      	ldr	r1, [r3, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	697a      	ldr	r2, [r7, #20]
 800071c:	430a      	orrs	r2, r1
 800071e:	605a      	str	r2, [r3, #4]

    temp = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]

    // Configure the alternate functionality
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	795b      	ldrb	r3, [r3, #5]
 8000728:	2b02      	cmp	r3, #2
 800072a:	d131      	bne.n	8000790 <GPIO_Init+0x31c>
    {
        uint8_t temp1, temp2;

        temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	08db      	lsrs	r3, r3, #3
 8000732:	743b      	strb	r3, [r7, #16]
        temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	f003 0307 	and.w	r3, r3, #7
 800073c:	73fb      	strb	r3, [r7, #15]
        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	7c3a      	ldrb	r2, [r7, #16]
 8000744:	3208      	adds	r2, #8
 8000746:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	220f      	movs	r2, #15
 8000750:	fa02 f303 	lsl.w	r3, r2, r3
 8000754:	43db      	mvns	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	7c3a      	ldrb	r2, [r7, #16]
 800075e:	4001      	ands	r1, r0
 8000760:	3208      	adds	r2, #8
 8000762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	7c3a      	ldrb	r2, [r7, #16]
 800076c:	3208      	adds	r2, #8
 800076e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	7a5b      	ldrb	r3, [r3, #9]
 8000776:	461a      	mov	r2, r3
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	4618      	mov	r0, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	7c3a      	ldrb	r2, [r7, #16]
 8000788:	4301      	orrs	r1, r0
 800078a:	3208      	adds	r2, #8
 800078c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    }

}
 8000790:	bf00      	nop
 8000792:	371c      	adds	r7, #28
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	40023800 	.word	0x40023800
 80007a0:	40013800 	.word	0x40013800
 80007a4:	40013c00 	.word	0x40013c00

080007a8 <GPIO_ToggleOutputPin>:
 * @return - none
 * 
 * @note - none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	70fb      	strb	r3, [r7, #3]
    pGPIOx->ODR ^= (1 << PinNumber);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	695b      	ldr	r3, [r3, #20]
 80007b8:	78fa      	ldrb	r2, [r7, #3]
 80007ba:	2101      	movs	r1, #1
 80007bc:	fa01 f202 	lsl.w	r2, r1, r2
 80007c0:	405a      	eors	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	615a      	str	r2, [r3, #20]
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <GPIO_EnableIRQ>:
 * @return - none
 * 
 * @note - none
 */
void GPIO_EnableIRQ(uint8_t IRQNumber)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
    if(IRQNumber <= 31)
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b1f      	cmp	r3, #31
 80007e2:	d80a      	bhi.n	80007fa <GPIO_EnableIRQ+0x26>
    {
        // Program ISER0 (Interrupt Set Enable Register)
        *NVIC_ISER0 |= (1 << IRQNumber);
 80007e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <GPIO_EnableIRQ+0x7c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	79fa      	ldrb	r2, [r7, #7]
 80007ea:	2101      	movs	r1, #1
 80007ec:	fa01 f202 	lsl.w	r2, r1, r2
 80007f0:	4611      	mov	r1, r2
 80007f2:	4a17      	ldr	r2, [pc, #92]	@ (8000850 <GPIO_EnableIRQ+0x7c>)
 80007f4:	430b      	orrs	r3, r1
 80007f6:	6013      	str	r3, [r2, #0]
    }else if(IRQNumber >= 64 && IRQNumber < 96)
    {
        // Program ISER2 (Interrupt Set Enable Register)
        *NVIC_ISER2 |= (1 << IRQNumber % 64);
    }
}
 80007f8:	e024      	b.n	8000844 <GPIO_EnableIRQ+0x70>
    }else if(IRQNumber > 31 && IRQNumber < 64)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b1f      	cmp	r3, #31
 80007fe:	d90f      	bls.n	8000820 <GPIO_EnableIRQ+0x4c>
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	2b3f      	cmp	r3, #63	@ 0x3f
 8000804:	d80c      	bhi.n	8000820 <GPIO_EnableIRQ+0x4c>
        *NVIC_ISER1 |= (1 << IRQNumber % 32);
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <GPIO_EnableIRQ+0x80>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	79fa      	ldrb	r2, [r7, #7]
 800080c:	f002 021f 	and.w	r2, r2, #31
 8000810:	2101      	movs	r1, #1
 8000812:	fa01 f202 	lsl.w	r2, r1, r2
 8000816:	4611      	mov	r1, r2
 8000818:	4a0e      	ldr	r2, [pc, #56]	@ (8000854 <GPIO_EnableIRQ+0x80>)
 800081a:	430b      	orrs	r3, r1
 800081c:	6013      	str	r3, [r2, #0]
}
 800081e:	e011      	b.n	8000844 <GPIO_EnableIRQ+0x70>
    }else if(IRQNumber >= 64 && IRQNumber < 96)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b3f      	cmp	r3, #63	@ 0x3f
 8000824:	d90e      	bls.n	8000844 <GPIO_EnableIRQ+0x70>
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b5f      	cmp	r3, #95	@ 0x5f
 800082a:	d80b      	bhi.n	8000844 <GPIO_EnableIRQ+0x70>
        *NVIC_ISER2 |= (1 << IRQNumber % 64);
 800082c:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <GPIO_EnableIRQ+0x84>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	79fa      	ldrb	r2, [r7, #7]
 8000832:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000836:	2101      	movs	r1, #1
 8000838:	fa01 f202 	lsl.w	r2, r1, r2
 800083c:	4611      	mov	r1, r2
 800083e:	4a06      	ldr	r2, [pc, #24]	@ (8000858 <GPIO_EnableIRQ+0x84>)
 8000840:	430b      	orrs	r3, r1
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	e000e100 	.word	0xe000e100
 8000854:	e000e104 	.word	0xe000e104
 8000858:	e000e108 	.word	0xe000e108

0800085c <GPIO_SetIRQPriority>:
 * @return - none
 * 
 * @note - none
 */
void GPIO_SetIRQPriority(uint8_t IRQNumber, uint32_t IRQPriority)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	71fb      	strb	r3, [r7, #7]
    // Find out the IPR (Interrupt Priority Reg.)
    uint8_t iprx = IRQNumber / 4;
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	089b      	lsrs	r3, r3, #2
 800086c:	73fb      	strb	r3, [r7, #15]
    uint8_t iprx_section = IRQNumber % 4;
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	73bb      	strb	r3, [r7, #14]

    uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000876:	7bbb      	ldrb	r3, [r7, #14]
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	b2db      	uxtb	r3, r3
 800087c:	3304      	adds	r3, #4
 800087e:	737b      	strb	r3, [r7, #13]
    *(NVIC_PR_BASEADDR + iprx) |= (IRQPriority << shift_amount);
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000888:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 800088c:	6819      	ldr	r1, [r3, #0]
 800088e:	7b7b      	ldrb	r3, [r7, #13]
 8000890:	683a      	ldr	r2, [r7, #0]
 8000892:	409a      	lsls	r2, r3
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 800089c:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80008a0:	430a      	orrs	r2, r1
 80008a2:	601a      	str	r2, [r3, #0]

}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <GPIO_IRQHandling>:
 * @return - none
 * 
 * @note - none
 */
void GPIO_IRQHandling(uint8_t PinNumber)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
    // Clear the EXTI PR (Pending Register) corresponding to the pin number
    if(EXTI->PR & (1 << PinNumber))
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <GPIO_IRQHandling+0x3c>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	79fa      	ldrb	r2, [r7, #7]
 80008c0:	2101      	movs	r1, #1
 80008c2:	fa01 f202 	lsl.w	r2, r1, r2
 80008c6:	4013      	ands	r3, r2
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d009      	beq.n	80008e0 <GPIO_IRQHandling+0x30>
    {
        EXTI->PR |= (1 << PinNumber);
 80008cc:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <GPIO_IRQHandling+0x3c>)
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	79fa      	ldrb	r2, [r7, #7]
 80008d2:	2101      	movs	r1, #1
 80008d4:	fa01 f202 	lsl.w	r2, r1, r2
 80008d8:	4611      	mov	r1, r2
 80008da:	4a04      	ldr	r2, [pc, #16]	@ (80008ec <GPIO_IRQHandling+0x3c>)
 80008dc:	430b      	orrs	r3, r1
 80008de:	6153      	str	r3, [r2, #20]
    }

}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	40013c00 	.word	0x40013c00

080008f0 <__libc_init_array>:
 80008f0:	b570      	push	{r4, r5, r6, lr}
 80008f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000928 <__libc_init_array+0x38>)
 80008f4:	4c0d      	ldr	r4, [pc, #52]	@ (800092c <__libc_init_array+0x3c>)
 80008f6:	1b64      	subs	r4, r4, r5
 80008f8:	10a4      	asrs	r4, r4, #2
 80008fa:	2600      	movs	r6, #0
 80008fc:	42a6      	cmp	r6, r4
 80008fe:	d109      	bne.n	8000914 <__libc_init_array+0x24>
 8000900:	4d0b      	ldr	r5, [pc, #44]	@ (8000930 <__libc_init_array+0x40>)
 8000902:	4c0c      	ldr	r4, [pc, #48]	@ (8000934 <__libc_init_array+0x44>)
 8000904:	f000 f818 	bl	8000938 <_init>
 8000908:	1b64      	subs	r4, r4, r5
 800090a:	10a4      	asrs	r4, r4, #2
 800090c:	2600      	movs	r6, #0
 800090e:	42a6      	cmp	r6, r4
 8000910:	d105      	bne.n	800091e <__libc_init_array+0x2e>
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f855 3b04 	ldr.w	r3, [r5], #4
 8000918:	4798      	blx	r3
 800091a:	3601      	adds	r6, #1
 800091c:	e7ee      	b.n	80008fc <__libc_init_array+0xc>
 800091e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000922:	4798      	blx	r3
 8000924:	3601      	adds	r6, #1
 8000926:	e7f2      	b.n	800090e <__libc_init_array+0x1e>
 8000928:	08000950 	.word	0x08000950
 800092c:	08000950 	.word	0x08000950
 8000930:	08000950 	.word	0x08000950
 8000934:	08000954 	.word	0x08000954

08000938 <_init>:
 8000938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800093a:	bf00      	nop
 800093c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800093e:	bc08      	pop	{r3}
 8000940:	469e      	mov	lr, r3
 8000942:	4770      	bx	lr

08000944 <_fini>:
 8000944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000946:	bf00      	nop
 8000948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800094a:	bc08      	pop	{r3}
 800094c:	469e      	mov	lr, r3
 800094e:	4770      	bx	lr
